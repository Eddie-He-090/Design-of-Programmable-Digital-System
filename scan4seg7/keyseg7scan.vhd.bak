library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.std_logic_arith.all; 

entity pwm is
 PORT(  clk  :  IN  STD_LOGIC;
		 rst  : IN STD_LOGIC;
		 key1 : IN STD_LOGIC;
	    key2 : IN STD_LOGIC;
		 seg7data: out std_logic_vector(6 downto 0);  --数码管的7段码数据
		 seg7com0: out std_logic;		--数码管的选通信号
       pwmout: out std_logic ); 		--pwm输出
END pwm;
ARCHITECTURE behav OF pwm IS
	--PWM用到的信号
  signal duty,cnt : integer range 0 to 1000000; --duty：高电平的时钟个数，cnt：计数器
  signal keyset 	: integer range 0 to 100; 		--用于设置占空比
  constant period :integer := 10000; 				--PWM的周期，即时钟个数
  signal pwmreg : std_logic;							--PWM寄存器
  
  --按键消抖用的信号
  signal key1filt : std_logic;	--按键key1消抖后得到的信号
  signal key2filt : std_logic; 	--按键key2消抖后得到的信号
  signal key1cnt : integer range 0 to 50000000; --用于对key1按键输入有效时间进行计数
  signal key2cnt : integer range 0 to 50000000; --用于对key2按键输入有效时间进行计数
  constant N :integer := 5000000;	--消抖时间，对于50Mhz的基准时钟，这相当于0.1S
  
begin

	pwmout <= pwmreg; --输出PWM
process(clk,rst)
begin
	if clk'event and clk = '1' then
		if rst = '0' then		--同步清零
			pwmreg <= '0';
			cnt <= 0;
		else 
			if cnt = period-1 then
				cnt <= 0;
			else 
				cnt <= cnt+1;
			end if;
			
			if cnt < duty then	--计数值0~duty时输出高电平
				pwmreg <= '1';
			else 						--计数值在duty~period 时输出低电平，故占空比为 duty:period 
				pwmreg <= '0';
			end if;
		end if;
	end if;
end process;

process (clk, key1filt, key2filt)
begin
	if clk'event and clk = '1' then
		if rst = '0' then	
			keyset <= 0;
		else
			--if (key1 = '0')  and keyset /= 9 then	--直接使用按键key1的信号，未经消抖处理
			if (key1filt = '1')  and keyset /= 9 then --消抖处理后
				keyset <= keyset + 1;
			end if;
			--if (key2 = '0') and keyset /= 0 then
			if (key2filt = '1') and keyset /= 0 then
				keyset <= keyset - 1;
			end if;
		end if;
	end if;
end process;

--根据按键计数，将占空比分为若干档
process (keyset)
begin 
	case (keyset) is
		when 0 =>   duty <= 10; 
		when 1  =>  duty <= 100; 
		when 2  =>  duty <= 300; 
		when 3  =>  duty <= 500; 
		when 4 =>   duty <= 1000; 
		when 5  =>  duty <= 2000; 
		when 6  =>  duty <= 3000; 
		when 7  =>  duty <= 5000; 
		when 8  =>  duty <= 7000; 
		when 9  =>  duty <= 10000; 
		when others =>  NULL;                
	end case;		
end process;

	--数码管译码显示
	seg7com0 <= '0';	--选通第一个数码管，用于显示当前档位
process(keyset)
	begin
			case keyset is
				when 0 => seg7data <= "1000000"; -- 0
				when 1 => seg7data <= "1111001"; -- 1
				when 2 => seg7data <= "0100100"; -- 2
				when 3 => seg7data <= "0110000"; -- 3
				when 4 => seg7data <= "0011001"; -- 4
				when 5 => seg7data <= "0010010"; -- 5
				when 6 => seg7data <= "0000010"; -- 6
				when 7 => seg7data <= "1111000"; -- 7
				when 8 => seg7data <= "0000000"; -- 8
				when 9 => seg7data <= "0010000"; -- 9
				when 10 => seg7data <= "0001000"; -- A
				when 11 => seg7data <= "0000011"; -- b
				when 12 => seg7data <= "0100111"; -- c
				when 13 => seg7data <= "0100001"; -- d
				when 14 => seg7data <= "0000110"; -- E
				when 15 => seg7data <= "0001110"; -- F
				when others => NULL;
			end case;
	end process;

--按键滤波模块
--设计思路：当按键被按下时，输入低电平，开始计数，一直计数到N，期间一旦按键输入高电平，即清零计数值。
--最后计数值若达到预设值N，表明按键已稳定按下。
--在N-1个计数值的时候输出key1filt 有效（'1'），并在其它计数值输出无效（'0'），即仅发出一个时钟宽度的脉冲

process (key1,key2)
begin 
	if clk'event and clk = '1' then
		if key1 = '0' then 	--当key1 输入低电平，即按键按下
			if key1cnt /= N then --一直计数到N
				key1cnt <= key1cnt + 1;
			end if;
			if key1cnt = N-1 then --最后一个计数时输出key1filt脉冲 
				key1filt <= '1';
			else
				key1filt <= '0';
			end if;
		else 					--若key1 输入高电平，表明按键被释放
			key1cnt <= 0;
		end if;

		if key2 = '0' then
			if key2cnt /= N then
				key2cnt <= key2cnt + 1;
			end if;
			if key2cnt = N-1 then
				key2filt <= '1';
			else
				key2filt <= '0';
			end if;
		else
			key2cnt <= 0;
		end if;
			
	end if;	
		
end process;


end behav;